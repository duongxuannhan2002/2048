using UnityEngine;
using UnityEngine.SceneManagement;
using Photon.Pun;
using Photon.Realtime;
using System.Collections;

public class HandleDisconnect : MonoBehaviourPunCallbacks
{
    private bool hasHandled = false;

    public override void OnDisconnected(DisconnectCause cause)
    {
        Debug.LogWarning("üîå OnDisconnected ƒë∆∞·ª£c g·ªçi: " + cause);
        NotificationManager.Instance.Show("M·∫•t k·∫øt n·ªëi m·∫°ng", 3f);
        StartCoroutine(HandleDisconnection());
    }

    public override void OnPlayerLeftRoom(Player otherPlayer)
    {
        // Ch·ªâ x·ª≠ l√Ω khi ƒëang ·ªü m√†n h√¨nh game
        if (SceneManager.GetActiveScene().buildIndex == 2) // Thay "GameScene" b·∫±ng t√™n scene game c·ªßa b·∫°n
        {
            NotificationManager.Instance.Show("ƒê·ªëi ph∆∞∆°ng r·ªùi ƒëi. Tr·ªü v·ªÅ menu ch√≠nh", 3f);
            StartCoroutine(HandleDisconnection());
        }
    }
    private void Update()
    {
        // Ph√°t hi·ªán s·ªõm n·∫øu Photon m·∫•t k·∫øt n·ªëi ho·∫∑c m·∫°ng kh√¥ng kh·∫£ d·ª•ng
        if (PlayerPrefs.GetString("mode") == "pvp")
        {
            if ((!PhotonNetwork.IsConnected || Application.internetReachability == NetworkReachability.NotReachable) && !hasHandled)
            {
                NotificationManager.Instance.Show("M·∫•t k·∫øt n·ªëi m·∫°ng ·ªü ƒë√¢y", 3f);
                StartCoroutine(HandleDisconnection());
            }
        }
    }

    IEnumerator HandleDisconnection()
    {
        yield return new WaitForSeconds(2f);
        AfterWait();
    }

    private void AfterWait()
    {
        if (hasHandled) return;
        hasHandled = true;

        PhotonNetwork.LeaveRoom();
        SceneManager.LoadScene(0); // ƒë·ªïi t√™n scene t√πy b·∫°n
    }
}